{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","TodoListItem","todo","onRemove","onToggle","id","text","checked","cn","onClick","TodoList","todos","map","key","App","setTodos","nextId","useRef","current","concat","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAgBeA,G,MATM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,aAAf,6BACA,yBAAKA,UAAU,WAAWD,M,OC4BjBE,G,MAhCI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACTC,mBAAS,IADA,mBAC5BC,EAD4B,KACrBC,EADqB,KAG7BC,EAAWC,uBAAY,SAACC,GAC5BH,EAASG,EAAEC,OAAOL,SACjB,IAEGM,EAAWH,uBACf,SAACC,GACCN,EAASE,GACTC,EAAS,IAGTG,EAAEG,mBAEJ,CAACT,EAAUE,IAGb,OACE,0BAAMJ,UAAU,aAAaU,SAAUA,GACrC,2BACEE,YAAY,sDACZR,MAAOA,EACPE,SAAUA,IAEZ,4BAAQO,KAAK,UACX,kBAAC,IAAD,U,8BCLOC,EAhBM,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC9BC,EAAsBH,EAAtBG,GAAIC,EAAkBJ,EAAlBI,KAAMC,EAAYL,EAAZK,QAElB,OACE,yBAAKpB,UAAU,gBACb,yBAAKA,UAAWqB,IAAG,WAAY,CAAED,YAAYE,QAAS,kBAAML,EAASC,KAClEE,EAAU,kBAAC,IAAD,MAAiB,kBAAC,IAAD,MAC5B,yBAAKpB,UAAU,QAAQmB,IAEzB,yBAAKnB,UAAU,SAASsB,QAAS,kBAAMN,EAASE,KAC9C,kBAAC,IAAD,SCCOK,EAfE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOR,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACnC,OACE,yBAAKjB,UAAU,YACZwB,EAAMC,KAAI,SAACV,GAAD,OACT,kBAAC,EAAD,CACEA,KAAMA,EACNW,IAAKX,EAAKG,GACVF,SAAUA,EACVC,SAAUA,SCoDLU,EA/DH,WAAO,IAAD,EACUxB,mBAAS,CACjC,CACEe,GAAI,EACJC,KAAM,2BACNC,SAAS,GAEX,CACEF,GAAI,EACJC,KAAM,2BACNC,SAAS,GAEX,CACEF,GAAI,EACJC,KAAM,2BACNC,SAAS,KAfG,mBACTI,EADS,KACFI,EADE,KAqBVC,EAASC,iBAAO,GAGhB5B,EAAWK,uBACf,SAACY,GACC,IAAMJ,EAAO,CACXG,GAAIW,EAAOE,QACXZ,OACAC,SAAS,GAEXQ,EAASJ,EAAMQ,OAAOjB,IACtBc,EAAOE,SAAW,IAEpB,CAACP,IAGGR,EAAWT,uBACf,SAACW,GACCU,EAASJ,EAAMS,QAAO,SAAClB,GAAD,OAAUA,EAAKG,KAAOA,QAE9C,CAACM,IAGGP,EAAWV,uBACf,SAACW,GACCU,EACEJ,EAAMC,KAAI,SAACV,GAAD,OACRA,EAAKG,KAAOA,EAAZ,2BAAsBH,GAAtB,IAA4BK,SAAUL,EAAKK,UAAYL,QAI7D,CAACS,IAGH,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYtB,SAAUA,IACtB,kBAAC,EAAD,CAAUsB,MAAOA,EAAOR,SAAUA,EAAUC,SAAUA,MC3D5DiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ca854255.chunk.js","sourcesContent":["// 화면을 가운데에 정렬시켜 줌.\r\n// 앱 타이틀(일정 관리)을 보여줌\r\n// children으로 내부 JSX를 props로 받아 와서 렌더링해줌\r\n\r\nimport React from 'react';\r\nimport './TodoTemplate.scss';\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n  return (\r\n    <div className=\"TodoTemplate\">\r\n      <div className=\"app-title\">일정 관리</div>\r\n      <div className=\"content\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoTemplate;\r\n","// 새로운 항목을 입력하고 추가할 수 있는 컴포넌트\r\n// state를 통해 인풋의 상태 관리\r\n\r\nimport React, { useCallback, useState } from 'react';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport './TodoInsert.scss';\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n  const [value, setValue] = useState('');\r\n\r\n  const onChange = useCallback((e) => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      onInsert(value);\r\n      setValue(''); // value 값 초기화\r\n\r\n      // submut 이벤트의 브라우저 새로고침 발생 방지\r\n      e.preventDefault();\r\n    },\r\n    [onInsert, value],\r\n  );\r\n\r\n  return (\r\n    <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n      <input\r\n        placeholder=\"할 일을 입력하세요.\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n      <button type=\"submit\">\r\n        <MdAdd />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","// 각 할 일 항목에 대한 정보를 보여주는 컴포넌트\r\n// todo 객체를 props로 받아 와서 상태에 따라 다른 스타일의 UI를 보여줌\r\n\r\nimport React from 'react';\r\nimport './TodoListItem.scss';\r\nimport {\r\n  MdCheckBoxOutlineBlank,\r\n  MdRemoveCircleOutline,\r\n  MdCheckBox,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames';\r\n\r\nconst TodoListItem = ({ todo, onRemove, onToggle }) => {\r\n  const { id, text, checked } = todo;\r\n\r\n  return (\r\n    <div className=\"TodoListItem\">\r\n      <div className={cn('checkbox', { checked })} onClick={() => onToggle(id)}>\r\n        {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n        <div className=\"text\">{text}</div>\r\n      </div>\r\n      <div className=\"remove\" onClick={() => onRemove(id)}>\r\n        <MdRemoveCircleOutline />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoListItem;\r\n","// todos 배열을 props로 받아 온 후,\r\n// 이를 배열 내장 함수 map을 사용해서\r\n// 여러 개의 TodoListItem 컴포넌트로 변환하여 보여줌\r\n\r\nimport React from 'react';\r\nimport './TodoList.scss';\r\nimport TodoListItem from './TodoListItem';\r\n\r\nconst TodoList = ({ todos, onRemove, onToggle }) => {\r\n  return (\r\n    <div className=\"TodoList\">\r\n      {todos.map((todo) => (\r\n        <TodoListItem\r\n          todo={todo}\r\n          key={todo.id}\r\n          onRemove={onRemove}\r\n          onToggle={onToggle}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useRef, useCallback } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      text: '공부하기',\n      checked: true,\n    },\n    {\n      id: 2,\n      text: '운동하기',\n      checked: true,\n    },\n    {\n      id: 3,\n      text: '청소하기',\n      checked: false,\n    },\n  ]);\n\n  // 고유값으로 사용될 id\n  // ref를 사용하여 변수 담기\n  const nextId = useRef(4);\n\n  // props로 전달해야 할 함수 생성시 useCallback를 사용해 함수를 감쌀 것\n  const onInsert = useCallback(\n    (text) => {\n      const todo = {\n        id: nextId.current,\n        text,\n        checked: false,\n      };\n      setTodos(todos.concat(todo));\n      nextId.current += 1;\n    },\n    [todos],\n  );\n\n  const onRemove = useCallback(\n    (id) => {\n      setTodos(todos.filter((todo) => todo.id !== id));\n    },\n    [todos],\n  );\n\n  const onToggle = useCallback(\n    (id) => {\n      setTodos(\n        todos.map((todo) =>\n          todo.id === id ? { ...todo, checked: !todo.checked } : todo,\n        ),\n      );\n    },\n    [todos],\n  );\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}